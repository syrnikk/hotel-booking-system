-- create user

-- DROP USER IF EXISTS hotel_user;
-- CREATE USER hotel_user WITH ENCRYPTED PASSWORD 'hoteluserpassword';
-- ALTER USER hotel_user CREATEDB;

-- create database and user

-- DROP DATABASE IF EXISTS hotel_db;
-- CREATE DATABASE hotel_db;

-- create table

DROP TABLE IF EXISTS kraj CASCADE;
DROP TABLE IF EXISTS miasto CASCADE;
DROP TABLE IF EXISTS adres CASCADE;
DROP TABLE IF EXISTS rola CASCADE;
DROP TABLE IF EXISTS uzytkownik CASCADE;
DROP TABLE IF EXISTS uzytkownik_rola CASCADE;
DROP TABLE IF EXISTS rezerwacja CASCADE;
DROP TABLE IF EXISTS typ_pokoju CASCADE;
DROP TABLE IF EXISTS hotel CASCADE;
DROP TABLE IF EXISTS pokoj CASCADE;
DROP TABLE IF EXISTS pokoj_rezerwacja CASCADE;
DROP TABLE IF EXISTS ocena CASCADE;

CREATE TABLE kraj(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    nazwa           VARCHAR(64) NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE miasto(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    kraj_id         BIGINT NOT NULL,
    nazwa           VARCHAR(64) NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY(kraj_id) REFERENCES kraj(id)
);

CREATE TABLE adres(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    miasto_id       BIGINT NOT NULL,
    ulica           VARCHAR(64) NOT NULL,
    numer           VARCHAR(16) NOT NULL,
    kod_pocztowy    VARCHAR(16) NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY(miasto_id) REFERENCES miasto(id)
);

CREATE TABLE rola(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    nazwa           VARCHAR(64) NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE uzytkownik(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    imie            VARCHAR(128) NOT NULL,
    nazwisko        VARCHAR(128) NOT NULL,
    email           VARCHAR(128) NOT NULL UNIQUE,
    haslo           VARCHAR(255) NOT NULL,
    telefon         VARCHAR(16),
    aktywny         BOOLEAN NOT NULL DEFAULT true,
    PRIMARY KEY(id)
);

CREATE TABLE uzytkownik_rola(
    uzytkownik_id   BIGINT,
    rola_id         BIGINT,
    PRIMARY KEY(uzytkownik_id, rola_id),
    FOREIGN KEY(uzytkownik_id) REFERENCES uzytkownik(id),
    FOREIGN KEY(rola_id) REFERENCES rola(id)
);

CREATE TABLE rezerwacja(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    uzytkownik_id   BIGINT NOT NULL,
    przyjazd_data   DATE NOT NULL,
    odjazd_data     DATE NOT NULL CHECK(przyjazd_data < odjazd_data),
    komentarz       TEXT,
    PRIMARY KEY(id),
    FOREIGN KEY(uzytkownik_id) REFERENCES uzytkownik(id)
);

CREATE TABLE typ_pokoju(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    typ             VARCHAR(128) NOT NULL,
    ilosc_osob      INT NOT NULL,
    cena            DECIMAL NOT NULL,
    opis            TEXT NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE hotel
(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    nazwa           VARCHAR(128) NOT NULL,
    adres_id        BIGINT NOT NULL UNIQUE,
    telefon         VARCHAR(16) NOT NULL,
    tytul           VARCHAR(255) NOT NULL,
    opis            TEXT NOT NULL,
    gwiazdki        INT NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY(adres_id) REFERENCES adres(id)
);


CREATE TABLE pokoj(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    typ_pokoju_id   BIGINT NOT NULL,
    hotel_id        BIGINT NOT NULL,
    numer_pokoju    VARCHAR(8) NOT NULL,
    pietro          INT,
    PRIMARY KEY(id),
    FOREIGN KEY(hotel_id) REFERENCES hotel(id),
    FOREIGN KEY(typ_pokoju_id) REFERENCES typ_pokoju(id)
);

CREATE TABLE pokoj_rezerwacja(
    pokoj_id        BIGINT NOT NULL,
    rezerwacja_id   BIGINT NOT NULL,
    PRIMARY KEY(pokoj_id, rezerwacja_id),
    FOREIGN KEY(pokoj_id) REFERENCES pokoj(id),
    FOREIGN KEY(rezerwacja_id) REFERENCES rezerwacja(id) ON DELETE CASCADE
);

CREATE TABLE ocena(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    ocena           DECIMAL(1,1) NOT NULL,
    uzytkownik_id   BIGINT NOT NULL,
    hotel_id        BIGINT NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY(hotel_id) REFERENCES hotel(id),
    FOREIGN KEY(uzytkownik_id) REFERENCES uzytkownik(id)
);

CREATE OR REPLACE VIEW miasto_view
AS
SELECT m.id, m.nazwa AS miasto_nazwa, m.kraj_id, k.nazwa AS kraj_nazwa FROM miasto m INNER JOIN kraj k ON k.id = m.kraj_id;

CREATE OR REPLACE VIEW hotel_view
AS
SELECT h.*, a.ulica, a.numer, a.kod_pocztowy, m.nazwa AS miasto_nazwa FROM hotel h INNER JOIN adres a ON h.adres_id = a.id INNER JOIN miasto m ON m.id = a.miasto_id;


-- dodawanie rezerwacji
CREATE VIEW rezerwacja_view AS SELECT r.id, r.uzytkownik_id, r.przyjazd_data, r.odjazd_data, pr.pokoj_id  FROM rezerwacja r INNER JOIN pokoj_rezerwacja pr ON r.id = pr.rezerwacja_id;  

CREATE OR REPLACE FUNCTION rezerwacja_view_dml () RETURNS TRIGGER AS 
$$
    DECLARE
        returned_id INTEGER;
    BEGIN                                                                                                      
    IF TG_OP = 'INSERT' THEN
        IF EXISTS (SELECT NULL 
                FROM rezerwacja_view AS existing
                WHERE NEW.pokoj_id = existing.pokoj_id
                  AND NEW.przyjazd_data < existing.odjazd_data 
                  AND existing.przyjazd_data < NEW.odjazd_data ) THEN
                  RAISE EXCEPTION 'Pokoj zajety !!!';
                  RETURN NULL; 
        END IF;                                                                                   
        INSERT INTO rezerwacja(uzytkownik_id, przyjazd_data, odjazd_data) VALUES (NEW.uzytkownik_id, NEW.przyjazd_data, NEW.odjazd_data) RETURNING id INTO returned_id;                             
        INSERT INTO pokoj_rezerwacja(rezerwacja_id, pokoj_id) VALUES(returned_id, NEW.pokoj_id);                                
        RETURN NEW;                                                                                             
    ELSIF TG_OP = 'UPDATE' THEN
        IF EXISTS (SELECT NULL 
                FROM rezerwacja_view AS existing
                WHERE NEW.pokoj_id = existing.pokoj_id
                  AND NEW.przyjazd_data < existing.odjazd_data 
                  AND existing.przyjazd_data < NEW.odjazd_data ) THEN
                  RAISE EXCEPTION 'Pokoj zajety !!!';
                  RETURN NULL; 
        END IF;                                                                               
        UPDATE rezerwacja SET uzytkownik_id=NEW.uzytkownik_id, przyjazd_data=NEW.przyjazd_data, odjazd_data=NEW.odjazd_data WHERE id=OLD.id;                   
        UPDATE pokoj_rezerwacja SET pokoj_id=NEW.pokoj_id WHERE id=OLD.id;
        RETURN NEW;                                                                                             
    ELSIF TG_OP = 'DELETE' THEN                                                                               
        DELETE FROM rezerwacja WHERE id=OLD.id;                                                                     
        RETURN NULL;                                                                                            
    END IF;                                                                                                   
    RETURN NEW;                                                                                               
    END; 
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER rezerwacja_view_dml_trigger  
    INSTEAD OF INSERT OR UPDATE OR DELETE ON rezerwacja_view
    FOR EACH ROW EXECUTE PROCEDURE rezerwacja_view_dml();

CREATE INDEX pokoj_hotel_id_fkey ON TABLE pokoj(hotel_id);