-- create user

-- DROP USER IF EXISTS hotel_user;
-- CREATE USER hotel_user WITH ENCRYPTED PASSWORD 'hoteluserpassword';
-- ALTER USER hotel_user CREATEDB;

-- create database and user

-- DROP DATABASE IF EXISTS hotel_db;
-- CREATE DATABASE hotel_db;

-- create table

DROP TABLE IF EXISTS kraj CASCADE;
DROP TABLE IF EXISTS miasto CASCADE;
DROP TABLE IF EXISTS adres CASCADE;
DROP TABLE IF EXISTS rola CASCADE;
DROP TABLE IF EXISTS uzytkownik CASCADE;
DROP TABLE IF EXISTS uzytkownik_rola CASCADE;
DROP TABLE IF EXISTS rezerwacja CASCADE;
DROP TABLE IF EXISTS typ_pokoju CASCADE;
DROP TABLE IF EXISTS hotel CASCADE;
DROP TABLE IF EXISTS pokoj CASCADE;
DROP TABLE IF EXISTS pokoj_rezerwacja CASCADE;
DROP TABLE IF EXISTS ocena CASCADE;

CREATE TABLE kraj(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    nazwa           VARCHAR(64) NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE miasto(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    kraj_id         BIGINT NOT NULL,
    nazwa           VARCHAR(64) NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY(kraj_id) REFERENCES kraj(id)
);

CREATE TABLE adres(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    miasto_id       BIGINT NOT NULL,
    ulica           VARCHAR(64) NOT NULL,
    numer           VARCHAR(16) NOT NULL,
    kod_pocztowy    VARCHAR(16) NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY(miasto_id) REFERENCES miasto(id)
);

CREATE TABLE rola(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    nazwa           VARCHAR(64) NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE uzytkownik(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    imie            VARCHAR(128) NOT NULL,
    nazwisko        VARCHAR(128) NOT NULL,
    email           VARCHAR(128) NOT NULL UNIQUE,
    haslo           VARCHAR(255) NOT NULL,
    telefon         VARCHAR(16),
    aktywny         BOOLEAN NOT NULL DEFAULT true,
    PRIMARY KEY(id)
);

CREATE TABLE uzytkownik_rola(
    uzytkownik_id   BIGINT,
    rola_id         BIGINT,
    PRIMARY KEY(uzytkownik_id, rola_id),
    FOREIGN KEY(uzytkownik_id) REFERENCES uzytkownik(id),
    FOREIGN KEY(rola_id) REFERENCES rola(id)
);

CREATE TABLE rezerwacja(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    uzytkownik_id   BIGINT NOT NULL,
    przyjazd_data   DATE NOT NULL,
    odjazd_data     DATE NOT NULL CHECK(przyjazd_data < odjazd_data),
    komentarz       TEXT,
    PRIMARY KEY(id),
    FOREIGN KEY(uzytkownik_id) REFERENCES uzytkownik(id)
);

CREATE TABLE typ_pokoju(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    typ             VARCHAR(128) NOT NULL,
    ilosc_osob      INT NOT NULL,
    cena            DECIMAL NOT NULL,
    opis            TEXT NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE hotel
(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    nazwa           VARCHAR(128) NOT NULL,
    adres_id        BIGINT NOT NULL UNIQUE,
    telefon         VARCHAR(16) NOT NULL,
    tytul           VARCHAR(255) NOT NULL,
    opis            TEXT NOT NULL,
    gwiazdki        INT NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY(adres_id) REFERENCES adres(id) ON DELETE CASCADE
);


CREATE TABLE pokoj(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    typ_pokoju_id   BIGINT NOT NULL,
    hotel_id        BIGINT NOT NULL,
    numer_pokoju    VARCHAR(8) NOT NULL,
    pietro          INT,
    PRIMARY KEY(id),
    FOREIGN KEY(hotel_id) REFERENCES hotel(id) ON DELETE CASCADE,
    FOREIGN KEY(typ_pokoju_id) REFERENCES typ_pokoju(id) ON DELETE NULL
);

CREATE TABLE pokoj_rezerwacja(
    pokoj_id        BIGINT NOT NULL,
    rezerwacja_id   BIGINT NOT NULL,
    PRIMARY KEY(pokoj_id, rezerwacja_id),
    FOREIGN KEY(pokoj_id) REFERENCES pokoj(id),
    FOREIGN KEY(rezerwacja_id) REFERENCES rezerwacja(id) ON DELETE CASCADE
);

CREATE TABLE ocena(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY,
    ocena           DECIMAL(1,1) NOT NULL,
    uzytkownik_id   BIGINT NOT NULL,
    hotel_id        BIGINT NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY(hotel_id) REFERENCES hotel(id),
    FOREIGN KEY(uzytkownik_id) REFERENCES uzytkownik(id)
);

CREATE OR REPLACE VIEW miasto_view
AS
SELECT m.id, m.nazwa AS miasto_nazwa, m.kraj_id, k.nazwa AS kraj_nazwa FROM miasto m INNER JOIN kraj k ON k.id = m.kraj_id;

CREATE OR REPLACE VIEW hotel_view
AS
SELECT h.*, a.ulica, a.numer, a.kod_pocztowy, m.id AS miasto_id, m.nazwa AS miasto_nazwa FROM hotel h INNER JOIN adres a ON h.adres_id = a.id INNER JOIN miasto m ON m.id = a.miasto_id;

CREATE OR REPLACE VIEW pokoj_view
AS
SELECT p.id, p.numer_pokoju, p.pietro, h.id AS hotel_id, h.nazwa, tp.id AS typ_pokoju_id, tp.typ FROM pokoj p INNER JOIN hotel h ON h.id = p.hotel_id INNER JOIN typ_pokoju tp ON tp.id = p.typ_pokoju_id;

CREATE OR REPLACE FUNCTION pokoj_rezerwacja_dml () RETURNS TRIGGER AS 
$$
    DECLARE
        returned_id INTEGER;
    BEGIN                                                                                                      
    IF TG_OP = 'INSERT' THEN
        IF EXISTS (SELECT NULL 
                FROM pokoj_rezerwacja pr
                INNER JOIN rezerwacja r ON r.id = pr.rezerwacja_id
                WHERE NEW.pokoj_id = pr.pokoj_id
                  AND (SELECT r2.przyjazd_data FROM rezerwacja r2 WHERE r2.id = NEW.rezerwacja_id) < r.odjazd_data 
                  AND r.przyjazd_data < (SELECT r2.odjazd_data FROM rezerwacja r2 WHERE r2.id = NEW.rezerwacja_id) ) THEN
                  RAISE EXCEPTION 'Pokoj zajety !!!';
                  RETURN NULL; 
        END IF;                                                                                                               
        RETURN NEW;                                                                                             
    ELSIF TG_OP = 'UPDATE' THEN
        IF EXISTS (SELECT NULL 
                FROM pokoj_rezerwacja pr
                INNER JOIN rezerwacja r ON r.id = pr.rezerwacja_id
                WHERE NEW.pokoj_id = pr.pokoj_id
                  AND (SELECT r2.przyjazd_data FROM rezerwacja r2 WHERE r2.id = NEW.rezerwacja_id) < r.odjazd_data 
                  AND r.przyjazd_data < (SELECT r2.odjazd_data FROM rezerwacja r2 WHERE r2.id = NEW.rezerwacja_id) ) THEN
                  RAISE EXCEPTION 'Pokoj zajety !!!';
                  RETURN NULL;
        END IF;                                                                               
        RETURN NEW;                                                                                                                                                                                        
    END IF;                                                                                                   
    RETURN NEW;                                                                                               
    END; 
$$ LANGUAGE plpgsql;

CREATE TRIGGER pokoj_rezerwacja_dml_trigger  
BEFORE INSERT OR UPDATE ON pokoj_rezerwacja
FOR EACH ROW EXECUTE PROCEDURE pokoj_rezerwacja_dml();


CREATE INDEX pokoj_hotel_id_fkey ON TABLE pokoj(hotel_id);

CREATE OR REPLACE FUNCTION get_dostepne_pokoje(id_hotelu BIGINT, data_przyjazdu DATE, data_odjazdu DATE)
RETURNS TABLE (LIKE pokoj)
AS
$$
    BEGIN
    IF data_przyjazdu >= data_odjazdu THEN
        RAISE EXCEPTION 'Data odjazdu musi byc wieksza niz data przyjazdu';
    END IF;
    RETURN QUERY
    SELECT p.* 
    FROM pokoj p
    WHERE p.hotel_id = id_hotelu AND p.id NOT IN 
    (
        SELECT p.id
        FROM pokoj p
        INNER JOIN pokoj_rezerwacja pr
        ON p.id = pr.pokoj_id
        INNER JOIN rezerwacja r
        ON r.id = pr.rezerwacja_id
        WHERE p.hotel_id = id_hotelu 
            AND (r.przyjazd_data <= data_przyjazdu AND r.odjazd_data > data_przyjazdu)
            OR (r.przyjazd_data < data_odjazdu AND r.odjazd_data >= data_odjazdu)
            OR (data_przyjazdu <= r.przyjazd_data AND data_odjazdu > r.przyjazd_data)
    );
    END
$$ LANGUAGE plpgsql;